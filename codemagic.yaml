workflows:
  android-workflow:
    name: Android Build
    instance_type: mac_mini_m1
    max_build_duration: 120
    cache:
      cache_paths:
        - $HOME/.gradle/caches
        - $HOME/.android/build-cache
        - $HOME/.pub-cache
        - $FCI_BUILD_DIR/.dart_tool
      # 性能优化：增加缓存路径
    environment:
      flutter: 3.19.6  # Conservative stable version for Kotlin compatibility
      xcode: latest
      cocoapods: default
      vars:
        JAVA_TOOL_OPTIONS: "-Xmx8g"
    scripts:
      - name: Set up local properties
        script: |
          echo "flutter.sdk=$FLUTTER_ROOT" > "$FCI_BUILD_DIR/android/local.properties"

      - name: Install Android SDK components
        script: |
          echo "📱 Installing Android SDK components..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;34.0.0" "ndk;26.1.10909125" --channel=3
          echo "🔄 Updating Android SDK..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --update
          echo "✅ Android SDK setup completed"

      - name: Setup Gradle properties for memory
        script: |
          mkdir -p $HOME/.gradle
          echo "org.gradle.jvmargs=-Xmx8g" > $HOME/.gradle/gradle.properties
          echo "org.gradle.daemon=true" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.parallel=true" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.configureondemand=true" >> $HOME/.gradle/gradle.properties

      - name: FAST minimal package reset 
        script: |
          echo "🚀 FAST minimal package reset for speed..."
          
          # 只做必要的清理
          flutter clean
          rm -f pubspec.lock
          
          # 删除localizations残留文件
          rm -f l10n.yaml || true
          rm -rf .dart_tool/flutter_gen/gen_l10n/ || true
          rm -rf lib/l10n/ || true
          
          # 快速获取依赖（极简依赖）
          flutter pub get
          
          echo "✅ FAST reset completed"
          
      # SPEED OPTIMIZATION: Skip verification steps for minimal test
          
      - name: Build APK with Flutter (FAST mode)
        script: |
          echo "🚀 Building APK with FAST mode..."
          echo "📋 Flutter version: $(flutter --version | head -1)"
          
          # 简化的快速构建过程
          echo "🔨 Starting Flutter APK build..."
          flutter build apk --release
          
          # 检查构建结果
          if [ $? -eq 0 ]; then
            echo "✅ APK build completed successfully!"
          else
            echo "❌ APK build failed with exit code $?"
            exit 1
          fi
          
      - name: Verify APK created
        script: |
          echo "🔍 Quick APK verification..."
          APK_FILE=$(find . -name "*.apk" -type f | head -1)
          if [ -n "$APK_FILE" ]; then
            echo "✅ APK found: $APK_FILE"
            ls -lh "$APK_FILE"
          else
            echo "❌ No APK file found!"
            exit 1
          fi
          
    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/apk/release/*.apk
      - android/app/build/outputs/apk/release/*.apk
      - build/**/*.apk
      - android/**/*.apk
      - "**/*.apk"

    publishing:
      # android_signing:
      #   keystore: $CM_KEYSTORE
      #   keystore_password: $CM_KEYSTORE_PASSWORD
      #   key_alias: $CM_KEY_ALIAS
      #   key_password: $CM_KEY_ALIAS_PASSWORD
      
      email:
        recipients:
          - your_email@example.com
        notify:
          success: true
          failure: true