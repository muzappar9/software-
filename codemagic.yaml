workflows:
  android-workflow:
    name: Android Build
    instance_type: mac_mini_m1
    max_build_duration: 120
    cache:
      cache_paths:
        - $HOME/.gradle/caches
        - $HOME/.android/build-cache
    environment:
      flutter: 3.24.0  # Use stable version before aggressive v1 embedding removal
      xcode: latest
      cocoapods: default
      vars:
        JAVA_TOOL_OPTIONS: "-Xmx8g"
    scripts:
      - name: Set up local properties
        script: |
          echo "flutter.sdk=$FLUTTER_ROOT" > "$FCI_BUILD_DIR/android/local.properties"

      - name: Install Android SDK components
        script: |
          echo "üì± Installing Android SDK components..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;34.0.0" "ndk;26.1.10909125" --channel=3
          echo "üîÑ Updating Android SDK..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --update
          echo "‚úÖ Android SDK setup completed"

      - name: Setup Gradle properties for memory
        script: |
          mkdir -p $HOME/.gradle
          echo "org.gradle.jvmargs=-Xmx8g" > $HOME/.gradle/gradle.properties
          echo "org.gradle.daemon=true" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.parallel=true" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.configureondemand=true" >> $HOME/.gradle/gradle.properties

      - name: Get Flutter packages
        script: |
          flutter packages pub get
          
      - name: Force upgrade problematic Android plugins
        script: |
          echo "üîß Force upgrading Android plugins to latest versions..."
          flutter pub add shared_preferences:^2.5.3 --no-pub
          flutter pub add path_provider:^2.1.5 --no-pub  
          flutter pub add sqflite:^2.4.2 --no-pub
          flutter packages pub get
          echo "‚úÖ Android plugins upgraded successfully"
          
      - name: Verify Android embedding configuration
        script: |
          echo "‚öôÔ∏è Verifying Android embedding v2 configuration..."
          echo "üìù Checking AndroidManifest.xml embedding setting:"
          grep -n "flutterEmbedding" android/app/src/main/AndroidManifest.xml || echo "Embedding setting not found"
          echo "üìÅ Checking MainActivity structure:"
          find android/app/src -name "MainActivity.*" -type f || echo "MainActivity not found"
          echo "‚úÖ Android embedding verification completed"

      - name: Clean build environment
        script: |
          echo "üßπ Cleaning build environment..."
          flutter clean
          cd android && ./gradlew clean && cd ..
          echo "‚úÖ Build environment cleaned"
          
      - name: Build APK with Flutter
        script: |
          echo "üöÄ Building APK with enhanced configuration..."
          echo "üìã Current working directory: $(pwd)"
          echo "üìã Flutter version:"
          flutter --version
          
          # Á°Æ‰øùÂú®Ê≠£Á°ÆÁöÑÁõÆÂΩï
          cd $FCI_BUILD_DIR
          echo "üìã Build directory: $(pwd)"
          
          # ËØ¶ÁªÜÁöÑFlutterÊûÑÂª∫ËøáÁ®ã
          echo "üî® Starting Flutter APK build..."
          flutter build apk --release --verbose
          
          # Ê£ÄÊü•ÊûÑÂª∫ÁªìÊûú
          if [ $? -eq 0 ]; then
            echo "‚úÖ Flutter build command completed successfully"
          else
            echo "‚ùå Flutter build command failed with exit code $?"
            exit 1
          fi
          
      - name: Comprehensive APK search
        script: |
          echo "üîç Comprehensive APK file search..."
          echo "üìÅ Current directory: $(pwd)"
          
          # ÂÖ®Á≥ªÁªüÊêúÁ¥¢APKÊñá‰ª∂
          echo "üîç Searching for ALL .apk files in current directory tree:"
          find . -name "*.apk" -type f 2>/dev/null || echo "No .apk files found"
          
          # Ê£ÄÊü•ÂèØËÉΩÁöÑÊûÑÂª∫ËæìÂá∫ÁõÆÂΩï
          echo "üìÇ Checking possible build directories:"
          for dir in "build/app/outputs/flutter-apk" "build/app/outputs/apk/release" "build/app/outputs/bundle/release" "android/app/build/outputs/apk/release"; do
            if [ -d "$dir" ]; then
              echo "‚úÖ Directory exists: $dir"
              ls -la "$dir"
            else
              echo "‚ùå Directory not found: $dir"
            fi
          done
          
          # ÊòæÁ§∫ÂÆåÊï¥ÁöÑbuildÁõÆÂΩïÁªìÊûÑ
          echo "üóÇÔ∏è Complete build directory structure:"
          if [ -d "build" ]; then
            find build -type f -name "*.apk" -o -name "*.aab" 2>/dev/null || echo "No APK/AAB files in build directory"
            echo "üìÅ Build directory tree (first 50 lines):"
            find build -type f | head -50 || echo "Build directory is empty or doesn't exist"
          else
            echo "‚ùå Build directory doesn't exist!"
          fi
          
          # Ê£ÄÊü•AndroidÈ°πÁõÆÁªìÊûÑ
          echo "üì± Android build outputs:"
          if [ -d "android" ]; then
            find android -name "*.apk" -type f 2>/dev/null || echo "No APK files in android directory"
          else
            echo "‚ùå Android directory doesn't exist!"
          fi
          
    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/apk/release/*.apk
      - android/app/build/outputs/apk/release/*.apk
      - build/**/*.apk
      - android/**/*.apk
      - "**/*.apk"

    publishing:
      # android_signing:
      #   keystore: $CM_KEYSTORE
      #   keystore_password: $CM_KEYSTORE_PASSWORD
      #   key_alias: $CM_KEY_ALIAS
      #   key_password: $CM_KEY_ALIAS_PASSWORD
      
      email:
        recipients:
          - your_email@example.com
        notify:
          success: true
          failure: true