workflows:
  android-workflow:
    name: Android Build
    instance_type: mac_mini_m1
    max_build_duration: 120
    # GPT-5建议：严格限制触发源，防止构建旧提交
    branch_patterns:
      - pattern: main
        include: true
        source: true
    cancel_previous_builds: true  # 新提交时自动取消旧构建
    cache:
      # 💣 DISABLE ALL CACHING - Force fresh build every time
      cache_paths: []
      # 缓存已被禁用以确保使用最新代码
    environment:
      flutter: 3.19.6  # Conservative stable version for Kotlin compatibility
      xcode: latest
      cocoapods: default
      vars:
        JAVA_TOOL_OPTIONS: "-Xmx8g"
    scripts:
      - name: 🔍 TRUTH VERIFICATION - Assert repo state & Kotlin sources
        script: |
          set -euxo pipefail
          echo "🔍 ===== GPT-5 DIAGNOSTIC SCRIPT ====="
          echo "CM_BRANCH=$CM_BRANCH"
          echo "CM_COMMIT=$CM_COMMIT"
          echo "Git HEAD: $(git rev-parse HEAD)"
          echo "Latest commit (on this checkout):"
          git log -1 --pretty='format:%H %ad %an %s' --date=iso

          echo "==== 🕵️ Kotlin files that mention GemmaInference / ModelVerificationTest ===="
          grep -RIn "GemmaInference\|ModelVerificationTest" android/app/src/main/kotlin || true

          echo "==== 📁 ALL MainActivity.kt files in project ===="
          find android -type f -name MainActivity.kt -print

          echo "==== 📄 Target MainActivity.kt (path + line count) ===="
          target="android/app/src/main/kotlin/com/example/legal_advisor_app/MainActivity.kt"
          ls -l "$target"
          wc -l "$target"
          echo "==== 📋 First 200 lines of MainActivity.kt ===="
          nl -ba "$target" | sed -n '1,200p'

          echo "🛡️ ===== FUSE CHECK ====="
          lines=$(wc -l < "$target")
          if [ "$lines" -gt 20 ] || ! grep -q "class MainActivity: FlutterActivity" "$target"; then
            echo "🚨 FUSE TRIPPED: Unexpected MainActivity.kt content (lines=$lines)."
            echo "📍 Please check branch/tag/PR merge-commit and duplicate files."
            exit 1
          fi
          echo "✅ FUSE PASSED: MainActivity.kt is minimal as expected"

      - name: Set up local properties
        script: |
          echo "flutter.sdk=$FLUTTER_ROOT" > "$FCI_BUILD_DIR/android/local.properties"

      - name: Install Android SDK components
        script: |
          echo "📱 Installing Android SDK components..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;34.0.0" "ndk;26.1.10909125" --channel=3
          echo "🔄 Updating Android SDK..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --update
          echo "✅ Android SDK setup completed"

      - name: Setup Gradle properties for memory
        script: |
          mkdir -p $HOME/.gradle
          echo "org.gradle.jvmargs=-Xmx8g" > $HOME/.gradle/gradle.properties
          echo "org.gradle.daemon=true" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.parallel=true" >> $HOME/.gradle/gradle.properties
          echo "org.gradle.configureondemand=true" >> $HOME/.gradle/gradle.properties

      - name: 💣 NUCLEAR cache clear + force latest code
        script: |
          echo "💣 NUCLEAR OPTION: Complete cache destruction and force git sync"
          
          # 1️⃣ 强制Git同步 - 确保最新代码
          echo "🔄 Force pulling latest code..."
          git fetch origin main
          git reset --hard origin/main
          git clean -fdx
          
          # 2️⃣ 核爆级清理 - 删除所有缓存
          echo "💥 Nuclear cache destruction..."
          rm -rf ~/.gradle/caches/ || true
          rm -rf ~/.android/build-cache/ || true
          rm -rf ~/.pub-cache/ || true
          rm -rf .dart_tool/ || true
          rm -rf build/ || true
          rm -rf android/.gradle/ || true
          rm -rf android/app/build/ || true
          rm -rf android/build/ || true
          
          # 3️⃣ Flutter完全重置
          echo "🚀 Flutter complete reset..."
          flutter clean
          rm -f pubspec.lock
          rm -f l10n.yaml || true
          rm -rf lib/l10n/ || true
          
          # 4️⃣ 验证MainActivity.kt文件
          echo "🔍 Verifying MainActivity.kt is ultra-minimal..."
          cat android/app/src/main/kotlin/com/example/legal_advisor_app/MainActivity.kt
          
          # 5️⃣ 重新获取依赖
          flutter pub get
          
          echo "✅ NUCLEAR reset completed - fresh environment guaranteed"
          
      # SPEED OPTIMIZATION: Skip verification steps for minimal test
          
      - name: Build APK with Flutter (FAST mode)
        script: |
          echo "🚀 Building APK with FAST mode..."
          echo "📋 Flutter version: $(flutter --version | head -1)"
          
          # 简化的快速构建过程
          echo "🔨 Starting Flutter APK build..."
          flutter build apk --release
          
          # 检查构建结果
          if [ $? -eq 0 ]; then
            echo "✅ APK build completed successfully!"
          else
            echo "❌ APK build failed with exit code $?"
            exit 1
          fi
          
      - name: Verify APK created
        script: |
          echo "🔍 Quick APK verification..."
          APK_FILE=$(find . -name "*.apk" -type f | head -1)
          if [ -n "$APK_FILE" ]; then
            echo "✅ APK found: $APK_FILE"
            ls -lh "$APK_FILE"
          else
            echo "❌ No APK file found!"
            exit 1
          fi
          
    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/apk/release/*.apk
      - android/app/build/outputs/apk/release/*.apk
      - build/**/*.apk
      - android/**/*.apk
      - "**/*.apk"

    publishing:
      # android_signing:
      #   keystore: $CM_KEYSTORE
      #   keystore_password: $CM_KEYSTORE_PASSWORD
      #   key_alias: $CM_KEY_ALIAS
      #   key_password: $CM_KEY_ALIAS_PASSWORD
      
      email:
        recipients:
          - your_email@example.com
        notify:
          success: true
          failure: true